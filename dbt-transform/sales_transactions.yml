code_explanation:
  description: >
    This YAML file provides an explanation of the SQL code that combines transaction
    details from ecommerce and subscriptions transactions.
  steps:
    - step: 1
      description: >
        Create a Common Table Expression (CTE) named `ecommerce_transactions` that selects
        and transforms transaction details from `ecommerce_transactions` and `ecommerce_orders`.
      details:
        - name: ecommerce_transactions
          purpose: >
            Extracts transaction details such as transaction ID, customer ID,
            creation timestamp, payment gateway, payment method, transaction amount,
            currency, status, transaction type, and reference transaction ID
            from `ecommerce_transactions`.
          fields_extracted:
            - id: Transaction ID (`p.id`)
            - customer_id: Customer ID from `q.customer:default_address:customer_id`
            - created_at: Creation timestamp of the transaction (`p.created_at`)
            - payment_gateway: Payment gateway determined by `p.gateway` or defaults to 'subscriptions_payments'
            - payment_method: Payment method type from `receipt:charges:data[0]:payment_method_details:type`
            - payment_gateway_transaction_id: Payment gateway transaction ID from `receipt:id`
            - amount: Transaction amount, negative for refunds (`if(kind = 'refund', amount*-1::float, amount::float)`)
            - currency: Currency of the transaction (`p.currency`)
            - status: Status of the transaction (`p.status`)
            - type: Type of transaction (`p.kind`)
            - reference_transaction_id: Reference transaction ID from `receipt:metadata:order_transaction_id`
            - order_id: Order ID associated with the transaction (`p.order_id`)
          source_tables:
            - ecommerce_transactions
            - ecommerce_orders
          join_condition: Joining `ecommerce_transactions` with `ecommerce_orders` on `p.order_id = q.id`

    - step: 2
      description: >
        Create a CTE named `subscriptions_transactions` that retrieves and transforms
        transaction details from `subscriptions_transactions`.
      details:
        - name: subscriptions_transactions
          purpose: >
            Extracts transaction details such as transaction ID, customer ID,
            creation timestamp, payment method, transaction amount,
            currency, status, transaction type, reference transaction ID,
            and associated order ID from `subscriptions_transactions`.
          fields_extracted:
            - ID: Transaction ID (`id`)
            - customer_id: Customer ID from `account:code`
            - created_at: Creation timestamp of the transaction (`created_at`)
            - payment_gateway: NULL (not applicable for subscriptions)
            - payment_method: Payment method type ('card') if `payment_method:object = 'credit_card'`
            - payment_gateway_transaction_id: Payment gateway transaction ID from `payment_gateway:id`
            - amount: Transaction amount, negative for refunds (`if(type = 'refund', amount*-1::float, amount::float)`)
            - currency: Currency of the transaction (`currency`)
            - status: Status of the transaction
            - type: Type of transaction
            - reference_transaction_id: Reference transaction ID from `original_transaction_id`
            - order_id: Order ID associated with the transaction (extracted from `subscription_ids`)
          source_table: subscriptions_transactions

    - step: 3
      description: >
        Create a CTE named `sales_transactions` that combines transaction data
        from `ecommerce_transactions` and `subscriptions_transactions`.
      details:
        - name: sales_transactions
          purpose: >
            Combines transaction data from both `ecommerce_transactions` and
            `subscriptions_transactions` CTEs into a single dataset.
          fields_combined: "* (All columns)"
          combined_from_ctes:
            - ecommerce_transactions
            - subscriptions_transactions

    - step: 4
      description: >
        Execute a final SELECT statement to retrieve all columns from the `sales_transactions`
        CTE, effectively displaying the finalized transaction data.
      details:
        - purpose: Retrieve all columns from the `sales_transactions` CTE.
        - source_cte: sales_transactions
