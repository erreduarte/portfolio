code_explanation:
  description: >
    This YAML file provides an explanation of the SQL code that processes and merges
    line item details and serial numbers from ecommerce orders.
  steps:
    - step: 1
      description: >
        Create a Common Table Expression (CTE) named `ecommerce_line_items` that extracts
        order ID, note attributes, SKU, and line item ID from `ecommerce_orders`.
      details:
        - name: ecommerce_line_items
          purpose: >
            Extracts order details including SKU and line item ID from `ecommerce_orders`,
            and explodes the `line_items` JSON array to individual records.
          fields_extracted:
            - order_id: Order ID
            - note_attributes: Note attributes from `note_attributes`
            - SKU: SKU extracted from `exploded_line_item:sku`
            - line_item_id: Line item ID extracted from `exploded_line_item:id`
          source_table: ecommerce_orders

    - step: 2
      description: >
        Create a CTE named `serial_exploded` that further expands the exploded note attributes
        into individual serial numbers.
      details:
        - name: serial_exploded
          purpose: >
            Expands the note attributes into individual serial numbers associated with
            each order and line item ID.
          fields_extracted:
            - order_id: Order ID
            - line_item_id: Line item ID
            - sku: SKU
            - exploded_note:value: Extracted serial number from `exploded_note:value`
          source_table: ecommerce_line_items

    - step: 3
      description: >
        Create a CTE named `serial_filtered` that filters and processes serial numbers
        and updates SKUs based on specific conditions.
      details:
        - name: serial_filtered
          purpose: >
            Filters and processes serial numbers, updating SKU and determining the
            correct note line item ID based on conditions.
          fields_extracted:
            - order_id: Order ID
            - line_item_id: Line item ID
            - serial_number: Serial number extracted from note attributes
            - updated_sku: Updated SKU based on serial number condition
            - note_line_item_id: Note line item ID determined based on serial number condition
          conditions_checked:
            - Condition checks if `exploded_note:name` contains keywords '%serial%' or '%camera_sn%'
            - Checks if `split(exploded_note:name, ':')[0]` matches regex '\\d{13,}' to identify serial numbers
          source_table: serial_exploded

    - step: 4
      description: >
        Create a CTE named `table_merged` that merges and selects final order details,
        ensuring correct SKU and serial number associations.
      details:
        - name: table_merged
          purpose: >
            Merges and selects final order details, ensuring the correct SKU and serial
            number associations based on `line_item_id` and `note_line_item_id` alignment.
          fields_extracted:
            - order_id: Order ID
            - sku: SKU after coalescing updated SKU
            - serial_number: Serial number
          conditions_checked:
            - Checks if `line_item_id` matches `note_line_item_id` for correct association
          source_table: serial_filtered

    - step: 5
      description: >
        Create a CTE named `sales_packages` that finalizes the sales packages by joining
        with a reference table and grouping results.
      details:
        - name: sales_packages
          purpose: >
            Finalizes the sales packages by joining with `pkg_table` on serial number
            and grouping results by order ID, SKU, and serial number.
          fields_extracted:
            - order_id: Order ID
            - SKU: SKU
            - serial_number: Final serial number after coalescing with `pkg_table`
          source_table: table_merged

    - step: 6
      description: >
        Execute a final SELECT statement to retrieve all columns from the `sales_packages`
        CTE, effectively displaying the finalized sales packages.
      details:
        - purpose: Retrieve all columns from the `sales_packages` CTE.
        - source_cte: sales_packages
