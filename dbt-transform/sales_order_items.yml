code_explanation:
  description: >
    This YAML file provides an explanation of the SQL code that combines order details
    from ecommerce and subscriptions orders.
  steps:
    - step: 1
      description: >
        Create a Common Table Expression (CTE) named `ecommerce_orders` that retrieves
        order details from the `ecommerce_orders` table.
      details:
        - name: ecommerce_orders
          purpose: >
            Extracts order details such as order ID, line item details (ID, SKU, quantity,
            price per item), tax, shipping cost, and currency from `ecommerce_orders`.
          fields_extracted:
            - order_id: Order ID from `ID` column
            - line_item_id: Line item ID extracted using `explode(from_json(line_items, schema_of_json('["str"]')))`
            - SKU: SKU (Stock Keeping Unit) extracted from `exploded_value:sku`
            - quantity: Quantity of items extracted from `exploded_value:quantity`
            - price_per_item: Price per item extracted from `exploded_value:price`
            - tax: Total tax extracted from `current_total_tax`
            - shipping_cost: Shipping cost extracted from `total_shipping_price_set:presentment_money:amount`
            - currency: Currency of the order
          source_table: ecommerce_orders

    - step: 2
      description: >
        Create a CTE named `subscriptions_orders` that retrieves order details from
        `subscriptions_adjustments` table.
      details:
        - name: subscriptions_orders
          purpose: >
            Extracts order details such as line item ID, order ID (mapped to invoice ID),
            SKU, quantity, price per item, tax, and currency from `subscriptions_adjustments`.
          fields_extracted:
            - line_item_id: Line item ID from `id`
            - order_id: Order ID (mapped to invoice ID)
            - SKU: Product code extracted from `product_code`
            - quantity: Quantity of items extracted from `quantity`
            - price_per_item: Unit amount extracted from `unit_amount`
            - tax: Tax amount extracted from `tax`
            - shipping_cost: NULL (as shipping cost is not applicable)
            - currency: Currency of the order
          source_table: subscriptions_adjustments

    - step: 3
      description: >
        Create a final CTE named `sales_orders` that combines the results of
        `ecommerce_orders` and `subscriptions_orders`.
      details:
        - name: sales_orders
          purpose: >
            Combines order details from both `ecommerce_orders` and `subscriptions_orders`
            CTEs into a single dataset.
          fields_combined: "* (All columns)"
          combined_from_ctes:
            - ecommerce_orders
            - subscriptions_orders

    - step: 4
      description: >
        Execute a final SELECT statement to retrieve all columns from the `sales_orders`
        CTE, effectively combining all order details from both ecommerce and subscriptions.
      details:
        - purpose: Retrieve all columns from the `sales_orders` CTE.
        - source_cte: sales_orders
